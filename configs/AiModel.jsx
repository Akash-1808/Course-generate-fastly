const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
  
  export  const GenerateCourseLayout_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a Course Tutorial on the Following details With the field as Course name, Description, Along with Chapter name, about, Duration : Category: 'Programming', Topic: 'Python', Level: Basic, Duration: 1 hours, No of chapters: 5 in JSON format\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"courseName\": \"Python Fundamentals for Beginners\",\n  \"description\": \"This course provides a foundational understanding of Python programming, suitable for individuals with no prior programming experience. You'll learn the core concepts of Python, enabling you to write basic scripts and understand more advanced topics in the future.\",\n  \"category\": \"Programming\",\n  \"topic\": \"Python\",\n  \"level\": \"Basic\",\n  \"duration\": \"1 hour\",\n  \"numberOfChapters\": 5,\n  \"chapters\": [\n    {\n      \"chapterName\": \"Chapter 1: Introduction to Python and Setup\",\n      \"about\": \"This chapter introduces you to the Python programming language, its uses, and why it's popular. You'll learn how to set up your Python development environment, install Python, and choose a suitable text editor or IDE.\",\n      \"duration\": \"15 minutes\"\n    },\n    {\n      \"chapterName\": \"Chapter 2: Variables, Data Types, and Operators\",\n      \"about\": \"This chapter covers the fundamental building blocks of Python: variables, data types (like integers, floats, strings, and booleans), and operators (arithmetic, comparison, and logical). You'll learn how to declare variables, store values, and perform basic operations.\",\n       \"duration\": \"15 minutes\"\n    },\n    {\n      \"chapterName\": \"Chapter 3: Control Flow Statements\",\n      \"about\": \"This chapter explores control flow, enabling you to make decisions and repeat actions in your code. You'll learn about conditional statements (if, elif, else) and loops (for and while loops) and how they control the execution of your program.\",\n      \"duration\": \"15 minutes\"\n    },\n    {\n      \"chapterName\": \"Chapter 4: Introduction to Strings and Lists\",\n      \"about\": \"This chapter focuses on working with two essential data structures in Python: strings and lists. You'll learn about string manipulation, creating and accessing lists, and basic list operations.\",\n     \"duration\": \"10 minutes\"\n    },\n     {\n      \"chapterName\": \"Chapter 5: Writing Your First Python Script\",\n      \"about\": \"In this final chapter, you'll put your learning to practice by building a simple Python script that incorporates the concepts covered in previous chapters. This hands-on experience will solidify your understanding and get you started with writing Python code.\",\n       \"duration\": \"15 minutes\"\n    }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });

   export const GenerateChapterLayout_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Explain the concept in Detail on Topic:c,Chapter:Chapter 1: Introduction to C and Setupin JSON Format with a list of array with field as the description in detail, Code Example (Code feild in <precode> format) if applicable\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"chapter\": \"Chapter 1: Introduction to C and Setup\",\n  \"topics\": [\n    {\n      \"topic\": \"A.  Overview of the C Programming Language\",\n      \"description\": [\n        {\n          \"detail\": \"C is a general-purpose, procedural computer programming language, supporting structured programming, lexical variable scope, and recursion, with a static type system. By design, C features that provide efficient and straightforward translation to machine instructions. It was originally developed at Bell Labs by Dennis Ritchie in the early 1970s.\",\n          \"sub_topics\": [\n            \"Procedural: C is a procedural language, which means programs are organized into a series of procedures or functions.\",\n            \"General-purpose: It's designed to be used in a wide variety of applications, not specifically tailored to one task.\",\n            \"Low-level access: C provides relatively low-level access to system memory and hardware, making it suitable for system programming.\",\n            \"Portability: C programs can be relatively easily ported to different operating systems and hardware architectures.\"\n          ]\n        },\n        {\n          \"detail\": \"Key characteristics of C include its efficiency, control over hardware, and portability. These features make it a popular choice for developing operating systems, embedded systems, and high-performance applications.  C is often called a 'middle-level' language because it combines elements of both high-level and low-level languages.  C is a compiled language; source code is translated into machine code before execution.\",\n          \"sub_topics\": [\n            \"Compiled language: The source code is translated into machine code before execution, resulting in faster execution speeds compared to interpreted languages.\",\n            \"Memory management: C gives the programmer fine-grained control over memory management. It is the programmer's responsibility to allocate and deallocate memory.  Incorrect memory management can lead to memory leaks or crashes.\",\n            \"Pointers: C uses pointers extensively to access memory locations directly, enabling efficient data manipulation. But they also increase the possibility of memory errors.\"\n          ]\n        },\n        {\n          \"detail\": \"C's influence is profound, serving as the foundation for many modern languages such as C++, Java, Python (partially implemented in C), and C#.  Understanding C is crucial for grasping computer science fundamentals and provides a solid base for learning other programming languages.\",\n          \"sub_topics\": [\n            \"Foundation for other languages: C's syntax and concepts have heavily influenced many other programming languages, including C++, Java, Python, and C#.\",\n            \"Understanding computer architecture: Programming in C helps you understand how computers work at a lower level, including memory management and hardware interaction.\"\n          ]\n        }\n      ]\n    },\n    {\n      \"topic\": \"B.  Setting up a C Development Environment\",\n      \"description\": [\n        {\n          \"detail\": \"Setting up a C development environment involves installing a C compiler, a text editor (or IDE), and optionally, a debugger.  The compiler translates your C code into executable machine code.\",\n          \"sub_topics\": [\n            \"Compiler: Essential for translating C source code into executable machine code. Popular compilers include GCC (GNU Compiler Collection) and Clang.\",\n            \"Text Editor/IDE: A text editor is used to write C code. IDEs (Integrated Development Environments) like Visual Studio Code, Eclipse CDT, and Code::Blocks provide more features like code completion, debugging, and project management.\",\n            \"Debugger: A tool for finding and fixing errors in your C code. GDB (GNU Debugger) is a common debugger.\"\n          ]\n        },\n        {\n          \"detail\": \"The most common compiler is GCC (GNU Compiler Collection).  On Linux systems, GCC is usually pre-installed or can be installed via the package manager (e.g., `apt-get install gcc` on Debian/Ubuntu, `yum install gcc` on Fedora/CentOS).  On macOS, you can install Xcode Command Line Tools which include GCC (or Clang, which is commonly aliased to GCC).  On Windows, you can use MinGW (Minimalist GNU for Windows) or WSL (Windows Subsystem for Linux) to get GCC.  IDEs provide an integrated environment for writing, compiling, debugging, and managing C projects.  Popular IDEs include Visual Studio Code (with C/C++ extension), Code::Blocks, Eclipse CDT, and CLion.\",\n          \"sub_topics\": [\n            \"GCC Installation: The GNU Compiler Collection is a widely used C compiler.\",\n            \"IDE Selection: Choose an IDE that suits your needs based on features and ease of use. VS Code is a popular lightweight option, while Eclipse CDT is a more feature-rich IDE.\",\n            \"MinGW/WSL for Windows: Provides a GNU environment on Windows, enabling the use of GCC and other Unix-like tools.\"\n          ]\n        },\n        {\n          \"detail\": \"Steps to install GCC on different operating systems are as follows:\",\n          \"sub_topics\": [\n            \"Linux: `sudo apt-get update && sudo apt-get install gcc` (Debian/Ubuntu), `sudo yum install gcc` (Fedora/CentOS)\",\n            \"macOS: `xcode-select --install` (installs Xcode Command Line Tools)\",\n            \"Windows: Download and install MinGW from its official website.  Make sure to add the MinGW's `bin` directory to your system's PATH environment variable.\",\n            \"WSL (Windows Subsystem for Linux): Enable WSL and install a Linux distribution like Ubuntu. Then, follow the Linux installation steps for GCC.\"\n          ]\n        }\n      ]\n    },\n    {\n      \"topic\": \"C.  Your First C Program: \\\"Hello, World!\\\"\",\n      \"description\": [\n        {\n          \"detail\": \"The \\\"Hello, World!\\\" program is a traditional introductory program that prints the message \\\"Hello, World!\\\" to the console. It demonstrates the basic structure of a C program, including header files, the `main` function, and the `printf` function.\",\n          \"sub_topics\": [\n            \"Basic C program structure: Demonstrates the necessary components of a minimal C program.\",\n            \"Header files: Shows the inclusion of `stdio.h`, which provides standard input/output functions like `printf`.\",\n            \"`main` function: Illustrates the entry point of the program.\"\n          ]\n        },\n        {\n          \"detail\": \"The basic structure includes the `#include <stdio.h>` directive, which includes the standard input/output library, providing functions like `printf`.  The `int main()` function is the entry point of the program.  The `printf()` function displays output to the console. The `return 0;` statement indicates that the program executed successfully.\",\n          \"sub_topics\": [\n            \"`#include <stdio.h>`:  This line tells the compiler to include the contents of the `stdio.h` header file.  This header file contains declarations for standard input/output functions, such as `printf`.\",\n            \"`int main()`: This is the main function where execution of the program begins. The `int` indicates that the function returns an integer value to the operating system. By convention, `return 0` indicates successful execution.\",\n            \"`printf(\\\"Hello, World!\\\\n\\\");`:  This line uses the `printf` function to print the string \\\"Hello, World!\\\" to the standard output (usually the console).  The `\\\\n` is a newline character, which moves the cursor to the next line after printing the message.\",\n            \"`return 0;`: This line returns the integer value 0 from the `main` function, indicating that the program executed successfully.\"\n          ]\n        },\n        {\n          \"detail\": \"To compile the program, use the command `gcc hello.c -o hello` (assuming the source file is named `hello.c`).  To run the compiled executable, use `./hello` (on Linux/macOS) or `hello.exe` (on Windows).\",\n          \"sub_topics\": [\n            \"Compilation: The process of converting C source code into an executable file.\",\n            \"Execution: Running the compiled program to see the output.\",\n            \"GCC command: `gcc <source_file>.c -o <executable_name>`\"\n          ]\n        }\n      ],\n      \"code_example\": \"<pre><code>#include &lt;stdio.h&gt;\\n\\nint main() {\\n  printf(\\\"Hello, World!\\\\n\\\");\\n  return 0;\\n}</code></pre>\"\n    },\n    {\n      \"topic\": \"D.  Basic C Syntax and Structure\",\n      \"description\": [\n        {\n          \"detail\": \"C syntax defines the rules for writing valid C code. Key elements include statements, expressions, comments, data types, variables, operators, and control flow statements.\",\n          \"sub_topics\": [\n            \"Statements: Instructions that the compiler executes.  Each statement usually ends with a semicolon (;).\",\n            \"Expressions: Combinations of operators and operands that evaluate to a value.  For example: `x + y`, `a * 5`\",\n            \"Comments:  Explanatory notes within the code that are ignored by the compiler. Single-line comments start with `//`, and multi-line comments are enclosed in `/*` and `*/`.\",\n            \"Data types:  Specify the type of data that a variable can hold (e.g., `int`, `float`, `char`).\",\n            \"Variables: Named storage locations that can hold data.  Variables must be declared with a specific data type before they can be used.\",\n            \"Operators: Symbols that perform operations on operands (e.g., `+`, `-`, `*`, `/`, `=`).\",\n            \"Control flow statements: Statements that control the order in which instructions are executed (e.g., `if`, `else`, `for`, `while`).\"\n          ]\n        },\n        {\n          \"detail\": \"A C program consists of preprocessor directives, function definitions (including the `main` function), variable declarations, statements, and expressions.  The basic structure typically follows a `#include` block, followed by function definitions, including `main`.  Functions are blocks of code that perform specific tasks.  Variable declarations specify the name and data type of variables. Statements perform actions within the functions.\",\n          \"sub_topics\": [\n            \"Preprocessor directives: Instructions to the preprocessor, such as `#include`, which includes header files.\",\n            \"Function definitions:  Blocks of code that perform specific tasks.  Every C program must have a `main` function, which is the entry point of the program.\",\n            \"Variable declarations:  Specify the name and data type of variables.  For example: `int age;`, `float salary;`\",\n            \"Code blocks: Sections of code enclosed in curly braces `{}`. Code blocks define the scope of variables.\",\n             \"Semicolons: Marks the end of each statement.  Missing semicolons can lead to compilation errors.\"\n          ]\n        },\n        {\n          \"detail\": \"C is case-sensitive, meaning `variable` and `Variable` are treated as different identifiers.  Proper indentation and commenting are crucial for code readability and maintainability.\",\n          \"sub_topics\": [\n            \"Case sensitivity:  C distinguishes between uppercase and lowercase letters.\",\n            \"Indentation:  Using spaces or tabs to visually structure code.  Consistent indentation makes code easier to read and understand.\",\n            \"Comments: Explanatory notes within the code that are ignored by the compiler. They are crucial for documenting the code and explaining its functionality.\"\n          ]\n        }\n      ],\n      \"code_example\": \"<pre><code>#include &lt;stdio.h&gt;\\n\\nint main() {\\n  // Declare an integer variable\\n  int age = 30;\\n\\n  // Print the value of the variable\\n  printf(\\\"Age: %d\\\\n\\\", age);\\n\\n  return 0;\\n}</code></pre>\"\n    }\n  ]\n}\n```"},
          ],
        },
      ],
    });
  
   
  
 